1. Creating Array Objects

create table REGIONS
    (REGION_NAME varchar(32) NOT NULL,
    ZIPS varchar32 ARRAY[10] NOT NULL,
    PRIMARY KEY (REGION_NAME));

insert into REGIONS values(
    'Northwest',
    '{"93101", "97201", "99210"}');
insert into REGIONS values(
    'Southwest',
    '{"94105", "90049", "92027"}');


Connection con = DriverManager.getConnection(url, props);
String [] northEastRegion = { "10022", "02110", "07399" };
Array anArray = con.createArrayOf("VARCHAR", northEastRegion);





2. Retrieving and Accessing Array Values in ResultSet

ResultSet rs = stmt.executeQuery(
    "SELECT region_name, zips FROM REGIONS");

while (rs.next()) {
    Array z = rs.getArray("ZIPS");
    String[] zips = (String[])z.getArray();
    for (int i = 0; i < zips.length; i++) {
        if (!ZipCode.isValid(zips[i])) {
            // ...
            // Code to display warning
        }
    }
}


3. Storing and Updating Array Objects

Use the methods PreparedStatement.setArray and PreparedStatement.setObject 
to pass an Array value as an input parameter to a PreparedStatement object.

The following example sets the Array object anArray (created in a previous example) 
as the second parameter to the PreparedStatement pstmt:


PreparedStatement pstmt = con.prepareStatement(
    "insert into REGIONS (region_name, zips) " + "VALUES (?, ?)");
pstmt.setString(1, "NorthEast");
pstmt.setArray(2, anArray);
pstmt.executeUpdate();


PRESCRIPTION->
Inside patient->
PRESCRIPTION: date.toString() + description



APPOINTMENT->
Inside Doctor-> int[] isAvailable() : size array = hours
                                    -1 for not start to end time
                                    0 for not allocated, isAvailable
                                    patientID for allocated hours
                                    
